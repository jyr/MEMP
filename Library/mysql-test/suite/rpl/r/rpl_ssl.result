stop slave;
drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
reset master;
reset slave;
drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
start slave;
grant replication slave on *.* to replssl@localhost require ssl;
create table t1 (t int auto_increment, KEY(t));
stop slave;
change master to
master_user='replssl',
master_password='',
master_ssl=1,
master_ssl_ca ='MYSQL_TEST_DIR/std_data/cacert.pem',
master_ssl_cert='MYSQL_TEST_DIR/std_data/client-cert.pem',
master_ssl_key='MYSQL_TEST_DIR/std_data/client-key.pem';
start slave;
insert into t1 values(1);
select * from t1;
t
1
Master_SSL_Allowed	Yes
Master_SSL_CA_Path	
Master_SSL_CA_File	MYSQL_TEST_DIR/std_data/cacert.pem
Master_SSL_Cert	MYSQL_TEST_DIR/std_data/client-cert.pem
Master_SSL_Key	MYSQL_TEST_DIR/std_data/client-key.pem
Checking that both slave threads are running.
STOP SLAVE;
select * from t1;
t
1
insert into t1 values (NULL);
Master_SSL_Allowed	Yes
Master_SSL_CA_Path	
Master_SSL_CA_File	MYSQL_TEST_DIR/std_data/cacert.pem
Master_SSL_Cert	MYSQL_TEST_DIR/std_data/client-cert.pem
Master_SSL_Key	MYSQL_TEST_DIR/std_data/client-key.pem
Checking that both slave threads are running.
drop user replssl@localhost;
drop table t1;
End of 5.0 tests
